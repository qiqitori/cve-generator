(function generate_english() {
	var tl = {
		"generic_vulnerability": "A vulnerability",
		"generic_vulnerabilities": "Multiple vulnerabilities",
		"memory_leak": "A memory leak",
		"unchecked_input": "Unchecked input",
		"wrong_processing": "Wrong processing",
		"weak_encryption": "Weak encryption",

		"crafted_packet": "a specially crafted packet",
		"crafted_file": "a specially crafted file",
		"crafted_audio_file": "a specially crafted audio file",
		"crafted_video_file": "a specially crafted video file",
		"crafted_image_file": "a specially crafted image file",

		"buffer_overflow": "a buffer overflow",
		"stack_based_buffer_overflow": "a stack-based buffer overflow",
		"stack_overflow": "a stack overflow",
		"integer_overflow": "an integer overflow",

		"use_after_free": "use after free()",
		"double_free": "double free()",

		"dead_lock": "a dead lock",
		"race_condition": "a race condition",

		"code_injection": "code injection",
		"sql_injection": "SQL injection",
		"xss_vulnerability": "an XSS vulnerability",

		"segmentation_fault": "segmentation fault",
		"division_by_zero": "divide by zero",
		"null_pointer_dereference": "NULL pointer dereference",
		"illegal_instruction": "illegal instruction",
		"memory_consumption": "memory consumption",
		"file_handle_consumption": "file handle consumption",
		"infinite_loop": "infinite loop",
		"assertion_failure": "assertion failure",

		"remote": "remote",
		"local": "local",

		"unauthenticated": "unauthenticated",
		"authenticated": "authenticated",

		"dos": "cause a denial of service",
		"exec": "execute arbitrary code",
		"read": "read sensitive data",
		"write": "modify data",
		"unspecified": "have unspecified impact"
	}

	function copy_placeholders_to_values() { // DEBUG
		$("input[type=text]").each(function(i, v) {
			var placeholder = $(v).attr("placeholder");
			if (placeholder) {
				$(v).val(placeholder);
			}
		});
	}

	function comma_or_and(i, length) {
		if (i < length-2) {
			return ", ";
		} else if (i == length-2) {
			return " and ";
		} else {
			return "";
		}
	}
	function add_a_or_an(noun) {
		if ("aeiouAEIOUFHLMNRSX".indexOf(noun.charAt(0)) == -1) { // we assume that capital letters signify an abbreviation that is pronounced letter-by-letter
			return "a "
		} else {
			return "an "
		}
	}

	$("#generate_button").click(function() {
//		var language = $("#language").val();
//		if (language != "english") return;

		if (!check_input()) return;

		var result;

		function software_name_info() {
			return "in " + $("#software_name").val();
		}

		function version_info() {
			var version_info = "";
			var versions = $("#affected_versions").val().split(", ");
			versions.forEach(function(v, i, a) {
				if (v.indexOf("-") != -1) {
					var from_to = v.split("-");
					if (from_to[0] == "") {
						version_info += "versions up to " + from_to[1];
					} else if (from_to[1] == "") {
						version_info += "versions from " + from_to[0] + " and up"; 
					} else if (from_to[0] && from_to[1]) {
						version_info += "versions from " + from_to[0] + " to " + from_to[1];
					} else {
						throw "version_info";
					}
				} else {
					version_info += "version " + v;
				}
				version_info += comma_or_and(i, a.length);
			});
			return version_info;
		}

		function file_function_info() {
			var file_function_names_val = $("#file_function_names").val();
			if (!file_function_names_val) {
				return "";
			}
			var file_function_info = "in ";
			var file_functions = file_function_names_val.split(", ");
			file_functions.forEach(function(v, i, a) {
				file_function = v.split(": ");
				if (file_function[1].indexOf(" ") == -1) {
					file_function_info += "the " + file_function[1] + " function in ";
				} else {
					functions = file_function[1].split(" ").forEach(function(v, i, a) {
						file_function_info += "the " + v;
						file_function_info += comma_or_and(i, a.length);
					});
					file_function_info += " functions in ";
				}
				file_function_info += file_function[0];
				file_function_info += comma_or_and(i, a.length);
			});
			return file_function_info;
		}

		function cause_info() {
			return cause = tl[$("#cause option:checked").val()];
		}

		function attacker_type_info() {
			var attacker_type_info = "";
			var $unauthenticated = $("#unauthenticated option:checked");
			var $attacker_type = $("#attacker_type option:checked");
			var attacker_type = "";
			if ($unauthenticated.val() != "na") {
				attacker_type += tl[$unauthenticated.val()] + " ";
			}
			if ($attacker_type.val() != "na") {
				attacker_type += tl[$attacker_type.val()] + " ";
			}
			attacker_type += "attacker "
			attacker_type_info += add_a_or_an(attacker_type) + attacker_type;
			attacker_type_info += "to";

			return attacker_type_info;
		}

		function impact_info() {
			var impact_info = "";
			var privilege_info = "";
			var $impact = $("#impact option:checked");
			$impact.each(function(i, v) {
				var val = $(v).val()
				impact_info += tl[val];
				if (val == "dos") {
					impact_info += " (" + tl[$("#dos_tech option:checked").val()] + ")";
				} else if (val == "exec") {
					privilege_escalation = $("#privilege_escalation").prop("checked");
					if (privilege_escalation) {
						impact_info += " with escalated privileges";
					}
				}
				impact_info += comma_or_and(i, $impact.length);
			});
			impact_info += privilege_info;
			return impact_info;
		}

		function tech_info() {
			var tech_info = "";
			var exploiting = $("#exploiting option:checked").val();
			if (exploiting) {
				tech_info += "by exploiting "
				tech_info += tl[exploiting];
			}
			var using = $("#using option:checked").val();
			if (using) {
				if (exploiting) tech_info += " "; // ugly
				tech_info += "using "
				tech_info += tl[using];
			}
			return tech_info;
		}

		function related_cves_info() {
			var not_to_be_confused_with = $("#not_to_be_confused_with").val();
			if (not_to_be_confused_with) {
				return ("This vulnerability is different from " + not_to_be_confused_with + ".");
			} else {
				return "";
			}
		}

		function fixes_improper_fix_info() {
			var fixes_improper_fix = $("#fixes_improper_fix").val();
			if (fixes_improper_fix) {
				return "This vulnerability was introduced by an improper fix of " + fixes_improper_fix + ".";
			} else {
				return "";
			}
		}

		function build_description() {
			var not_public = $("#not_public").prop("checked");
			if (not_public) {
				return "The details of this vulnerability have not been made public yet."
			} else {
				var result = cause_info() + " " + file_function_info() + " " + software_name_info() + " " + version_info() + " may allow " + attacker_type_info() + " " + impact_info() + " " + tech_info() + ".";
				result += related_cves_info() ? " " + related_cves_info() : "";
				result += fixes_improper_fix_info() ? " " + fixes_improper_fix_info() : "";
				return result;
			} 
		}

		$("#result_en").text(build_description());
	});

	if (DEBUG) {
		copy_placeholders_to_values();
	}
})();
